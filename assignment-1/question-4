// You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

// Increment the large integer by one and return the resulting array of digits.

// Example 1:
// Input: digits = [1,2,3]
// Output: [1,2,4]
// Explanation: The array represents the integer 123.

// Incrementing by one gives 123 + 1 = 124.
// Thus, the result should be [1,2,4].

#include<bits/stdC++.h>
using namespace std;
vector<int>solve(vector<int>&vec)
{
    int n=vec.size();
    int num=0;
    for(int i=0;i<n;i++)
    {
        num=num*10+vec[i];
    }
    num=num+1;
    vector<int>res;
    while(num)
    {
        int digit=num%10;
        num=num/10;
        res.push_back(digit);
    }
    reverse(res.begin(),res.end());
    return res;
}
int main(){
    vector<int>vec={1,2,3};
    vector<int>res=solve(vec);
    for(int i=0;i<res.size();i++)
      cout<<res[i]<<" ";
    return 0;
}
